@page "/"
@using System.Security.Cryptography
@using System.Reflection
@using System.Text
@using ncrypt.Domain
@using ncrypt.Library
@using NL = ncrypt.Library
@using ncrypt.Library.Cipher
@using ncrypt.Library.Hash
@using ncrypt.Server.Model

<PageTitle>ncrypt</PageTitle>

<div class="container-fluid h-100">
    <div class="row h-100">
        <div class="col-6 ps-0 pe-1 pb-1 d-flex h-100">
            <div class="col-4 pe-1">
                <RadzenCard class="p-2 h-100">
                    <RadzenDataList WrapItems="true" Data="@models" TItem="List<Type>" Style="display:block">
                        <Template Context="list">
                            <h3 class="mt-3 mx-2 mb-0 w-100">@(list.First().GetCustomAttribute<RenderUI>()!.Class.ToString())</h3>
                            <hr class="mb-2 mt-0 w-100" />
                            @foreach (var model in list)
                            {
                                <Draggable Data="@model" Class="mx-1" Style="width:45%">
                                    <RadzenCard class="m-0 mb-1 px-0 py-1 plain-card">
                                        <p style="text-align:center;font-size:20px; font-family:'Century Gothic'">@(model.Name.Replace ("Service", ""))</p>
                                    </RadzenCard>
                                </Draggable>
                            }
                        </Template>
                    </RadzenDataList>
                </RadzenCard>
            </div>
            <div class="col-8 h-100">
                <RadzenCard class="w-100 p-0 h-100">
                    <div class="row mx-2 mt-1">
                        <div class="col df-jc-ac p-1 m-1">
                            <RadzenButton class="my-1 h-100 rounded-pill w-100" Click=@OnDeleteClick Text="Delete" Icon="delete" ButtonStyle="ButtonStyle.Danger" />
                        </div>
                        <div class="col df-jc-ac p-1 m-1">
                            <RadzenButton class="my-1 h-100 rounded-pill w-100" Click=@OnDo Text="DO" Icon="check" ButtonStyle="ButtonStyle.Success" />
                        </div>
                    </div>
                    <hr class="mx-2 my-1" />
                    <div class="row m-2 mt-2 h-100" Style="overflow:auto">
                        <DropTarget T="Type" Drop="@OnDrop">
                            @if (sequence.Count == 0)
                            {
                                <div class="w-100 h-100 df-jc-ac">
                                    <h2 style="color:#d5d5d5">Place something here</h2>
                                </div>
                            }
                            <ul style="list-style:none;padding:0">
                                @foreach (var model in sequence)
                                {
                                    <li class="mb-1">
                                        <_GenericCard Model="model"></_GenericCard>
                                    </li>
                                }
                            </ul>
                        </DropTarget>
                    </div>
                </RadzenCard>
            </div>
        </div>
        <div class="col-6">
            <div class="row h-50 pb-1 text-container">
                <RadzenDropDown class="rounded-pill convert-type-dd" Style="" TValue="NL.ConvertType" Data=Enum.GetValues(typeof(NL.ConvertType)) @bind-Value=@InputConvertType />
                <RadzenTextArea class="w-100 p-2 text-area" Placeholder="Enter here..." @oninput=@OnInputChange />
            </div>
            <div class="row h-50 pb-1 text-container">
                <RadzenDropDown class="rounded-pill convert-type-dd" TValue="NL.ConvertType" Data=Enum.GetValues(typeof(NL.ConvertType)) @bind-Value=@OutputConvertType />
                <RadzenTextArea class="w-100 p-2 text-area" Disabled=true @bind-Value=@Output />
            </div>
        </div>
    </div>
</div>

<style>
    .plain-card {
        width: 100%;
        background-color: #479cc8;
        color: white;
        border: solid 1px #479cc8;
        border-radius: 7px;
    }

        .plain-card:hover {
            border: solid 1px #001D6E;
        }

    .text-container {
        position: relative;
    }

    .convert-type-dd {
        width: 10%;
        border: solid 0.1px #1A3651;
        position: absolute;
        right: 10px;
        top: 10px
    }

    .text-area {
        resize: none;
        line-height: 1.1;
        font-size: 1.1rem;
        color: black !important;
    }
</style>

@code {
    String Input { get; set; } = String.Empty;
    String Output { get; set; } = String.Empty;

    private NL.ConvertType _inputConvertType;
    NL.ConvertType InputConvertType
    {
        get => _inputConvertType;
        set
        {
            _inputConvertType = value;
            OnDo ();
        }
    }

    private NL.ConvertType _outputConvertType;
    NL.ConvertType OutputConvertType
    {
        get => _outputConvertType;
        set
        {
            _outputConvertType = value;
            OnDo ();
        }
    }

    List<List<Type>> models = new ();
    List<GenericModel> sequence = new ();

    protected override void OnInitialized ()
    {
        Assembly lib = Assembly.Load ("ncrypt.Library");
        var services = lib.GetTypes ()
            .Where (t => t.CustomAttributes
                .Any (a => a.AttributeType == typeof (RenderUI))
            ).ToList ();

        models = services.GroupBy (
            s => s.GetCustomAttribute<RenderUI> ()!.Class,
            (key, g) => g.ToList ()
        ).ToList ();
    }

    void OnDrop (Type type)
    {
        sequence.Add (new (type));
    }

    void OnDeleteClick ()
    {
        sequence.Clear ();
        Input = String.Empty;
        Output = String.Empty;
    }

    private void OnInputChange (ChangeEventArgs e)
    {
        Input = (String) e.Value!;
        OnDo ();
    }

    void OnDo ()
    {
        StringBuilder errors = new ();

        try
        {
            String result = NL.Converter.ToHex (Input, InputConvertType);
            foreach (var model in sequence)
            {
                Type serviceType = model.ServiceType;
                MethodInfo? method = serviceType.GetMethod (model.SelectedMethod);
                List<Object> methodParams = new ();
                StringBuilder missingParams = new ();

                foreach (var parameter in method!.GetParameters ())
                {
                    try
                    {
                        if (parameter.Name!.Equals ("input"))
                            methodParams.Add (result);
                        else
                            methodParams.Add (model.Result[parameter.Name]);
                    }
                    catch (KeyNotFoundException e)
                    {
                        var splitted = e.Message.Split ('\'');
                        if (splitted.Count () == 3)
                            missingParams.AppendLine ($"Parameter {splitted[1]} is missing");
                        continue;
                    }
                }

                List<Object> constructorParams = new ();
                foreach (var parameter in serviceType.GetConstructors ().First ().GetParameters ())
                {
                    try
                    {
                        constructorParams.Add (model.Result[parameter.Name!]);
                    }
                    catch (KeyNotFoundException e)
                    {
                        var splitted = e.Message.Split ('\'');
                        if (splitted.Count () == 3)
                            missingParams.AppendLine ($"Parameter {splitted[1]} is missing");
                        continue;
                    }
                }
                if (!missingParams.ToString ().Equals (String.Empty))
                {
                    errors.Append (missingParams);
                    continue;
                }

                var instance = Activator.CreateInstance (serviceType, constructorParams.ToArray ());

                result = (String) method.Invoke (instance, methodParams.ToArray ())!;                
            }

            Output = Converter.FromHex (result, OutputConvertType);
        }
        catch(FormatException e)
        {
            errors.AppendLine ("Invalid Input Format");
        }

        if (!String.IsNullOrEmpty(errors.ToString()))
            Output = errors.ToString ();
    }
}