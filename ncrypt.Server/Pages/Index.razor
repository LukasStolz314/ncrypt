@page "/"
@using System.Security.Cryptography
@using System.Reflection
@using System.Text
@using ncrypt.Library
@using NL = ncrypt.Library
@using ncrypt.Library.Cipher
@using ncrypt.Library.Hash
@using ncrypt.Server.Model

@inject ApplicationService Service

<PageTitle>ncrypt</PageTitle>

<div class="container-fluid h-100">
    <div class="row h-100">
        <div class="col-6 ps-0 pe-1 pb-1 d-flex h-100">
            <div class="col-4 pe-1">
                <RadzenCard class="p-2 h-100">
                    <RadzenDataList WrapItems="true" Data="@models" TItem="List<Type>" Style="display:block">
                        <Template Context="list">
                            <h3 class="mt-3 mx-2 mb-0 w-100">@(list.First().GetCustomAttribute<RenderUI>()!.Class.ToString())</h3>
                            <hr class="mb-2 mt-0 w-100" />
                            @foreach (var model in list)
                            {
                                <Draggable Data="@model" Class="mx-1" Style="width:45%">
                                    <RadzenCard class="m-0 mb-1 px-0 py-1 plain-card">
                                        <p style="text-align:center;font-size:20px; font-family:'Century Gothic'">@(model.Name.Replace ("Service", ""))</p>
                                    </RadzenCard>
                                </Draggable>
                            }
                        </Template>
                    </RadzenDataList>
                </RadzenCard>
            </div>
            <div class="col-8 h-100">
                <RadzenCard class="w-100 p-0 h-100">
                    <div class="row mx-2 mt-1">
                        <div class="col df-jc-ac p-1 m-1">
                            <RadzenButton class="my-1 h-100 rounded-pill w-100" Click=@OnDeleteClick Text="Clear" Icon="delete" ButtonStyle="ButtonStyle.Danger" />
                        </div>
                        <div class="col df-jc-ac p-1 m-1">
                            <RadzenButton class="my-1 h-100 rounded-pill w-100" Click=@Execute Text="Execute" Icon="check" ButtonStyle="ButtonStyle.Success" />
                        </div>
                    </div>
                    <hr class="mx-2 my-1" />
                    <div class="row m-2 mt-2 h-100" Style="overflow:auto">
                        <DropTarget T="Type" Drop="@OnDrop">
                            @if (sequence.Count == 0)
                            {
                                <div class="w-100 h-100 df-jc-ac">
                                    <h2 style="color:#d5d5d5">Place something here</h2>
                                </div>
                            }
                            <ul style="list-style:none;padding:0">
                                @foreach (var model in sequence)
                                {
                                    <li class="mb-1">
                                        <_GenericCard Model="model" RemoveCard=@OnRemoveCard MoveCard=@OnMoveCard></_GenericCard>
                                    </li>
                                }
                            </ul>
                        </DropTarget>
                    </div>
                </RadzenCard>
            </div>
        </div>
        <div class="col-6">
            <div class="row h-50 pb-1 text-container">
                <RadzenDropDown class="rounded-pill convert-type-dd" TValue="NL.ConvertType" Data=Enum.GetValues(typeof(NL.ConvertType)) @bind-Value=@InputConvertType />
                <RadzenTextArea class="w-100 p-2 text-area" Placeholder="Enter here..." @oninput=@OnInputChange />
            </div>
            <div class="row h-50 pb-1 text-container">
                <RadzenDropDown class="rounded-pill convert-type-dd"
                                TValue="NL.ConvertType"
                                Data=Enum.GetValues(typeof(NL.ConvertType))
                                @bind-Value=@OutputConvertType>
                </RadzenDropDown>
                <RadzenButton class="rounded-pill clear-button"
                              Click=@(() => Output = String.Empty)
                              Icon="clear"
                              ButtonStyle="ButtonStyle.Light">
                </RadzenButton>

                @{
                    Int32 buttonSpacing = 50;
                }
                @foreach (var routine in (sequence.LastOrDefault()?.GetCopyRoutinesOfSelectedMethod() ?? new()))
                {
                    buttonSpacing += 40;
                    String topSpacing = $"top:{buttonSpacing}px;";
                    <RadzenButton class="rounded-pill copy-button"
                              Text="@(routine.GetCustomAttribute<CopyRoutine>().Name)"
                              Click=@(args => Service.ExecuteCopy(routine, Output))
                              Style="@topSpacing"
                              ButtonStyle="ButtonStyle.Secondary">
                    </RadzenButton>
                }
                <RadzenTextArea class="w-100 p-2 text-area" Disabled=true @bind-Value=@Output />
            </div>
        </div>
    </div>
</div>

@code {
    // Textarea value fields
    String Input { get; set; } = String.Empty;
    String Output { get; set; } = String.Empty;

    // Datalists
    List<List<Type>> models = new();
    List<GenericModel> sequence = new();

    // Convert type dropdowns
    private NL.ConvertType _inputConvertType;
    NL.ConvertType InputConvertType
    {
        get => _inputConvertType;
        set
        {
            _inputConvertType = value;
            Execute();
        }
    }

    private NL.ConvertType _outputConvertType;
    NL.ConvertType OutputConvertType
    {
        get => _outputConvertType;
        set
        {
            _outputConvertType = value;
            Execute();
        }
    }

    protected override void OnInitialized()
        => models = Service.LoadGroupedTypes();

    // Event Handler
    void OnDrop(Type type)
        => sequence.Add(new(type));

    void OnDeleteClick()
        => sequence.Clear();

    void OnRemoveCard(GenericModel model)
        => sequence.Remove(model);

    void OnMoveCard((GenericModel Model, Int32 Direction) pair)
    {
        var oldIndex = sequence.FindIndex(m => m.Equals(pair.Model));

        Boolean minCheck = pair.Direction == 1 && oldIndex != 0;
        Boolean maxCheck = pair.Direction == -1 && oldIndex != sequence.Count - 1;

        if (minCheck || maxCheck)
        {
            sequence.RemoveAt(oldIndex);
            sequence.Insert(oldIndex - pair.Direction, pair.Model);
        }
    }

    private void OnInputChange(ChangeEventArgs e)
    {
        Input = (String)e.Value!;
        Execute();
    }

    // Execution
    void Execute()
    {
        ExecuteSequenceModel model = new(Input, InputConvertType, sequence, OutputConvertType);
        Output = Service.ExecuteSequence(model, out String errors);

        if (!String.IsNullOrEmpty(errors.ToString()))
            Output = errors;
    }
}